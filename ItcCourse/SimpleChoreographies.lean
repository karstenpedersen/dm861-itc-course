/- Examples and exercises from chapter 2 -/
import Mathlib
import ItcCourse.Common

-- here are some process names that are used in the exmaples and exercises
variable {buyer seller alice bob charlie: PName}

/- The syntax of simple choreographies -/
inductive SimpleChor : Type where
  | nil
  | com (p q : PName) (c : SimpleChor)

syntax:10 (name := sccom) term:10 " ‚Æï " term:10 " ; " term:10 : term
@[macro sccom] def sccomImpl : Lean.Macro
  | `($t1:term ‚Æï $t2:term ; $t3:term) => `(SimpleChor.com $t1 $t2 $t3)
  | _ => Lean.Macro.throwUnsupported

syntax:12 (name := scnil) "ùüé" : term
@[macro scnil] def scnilImpl : Lean.Macro
  | `(ùüé) => `(SimpleChor.nil)
  | _ => Lean.Macro.throwUnsupported

-- Example 2.2
example : SimpleChor :=
  buyer ‚Æï seller;
  seller ‚Æï buyer;
  ùüé

-- Exercise 2.1 Write a choregraphy for the following ring protocol among Alice, Bob, and Charlie
-- Alice communicates a message to Bob, Bob communicates a message to Charlie, and Charlie communicates a message to Alice.
example : SimpleChor := sorry
-- try it :D

-- Exercise 2.2 Write a choreography for the following scatter protocol where Alice communicates a message to Bob and Charlie.
-- Alice communicates a message to Bob and Alice communicates a message to Charlie.
example : SimpleChor := sorry
-- try it :D

inductive TransitionLabel : Type where
  | com (p q : PName)

syntax:10 (name := sclcom) term:10 " ‚Æï " term:10 : term
@[macro sclcom] def sclcomImpl : Lean.Macro
  | `($t1:term ‚Æï $t2:term) => `(TransitionLabel.com $t1 $t2)
  | _ => Lean.Macro.throwUnsupported

def pn : TransitionLabel ‚Üí Finset PName
  | p ‚Æï q => {p, q}

syntax:10 (name := scpndisj) term:10 " # " term:10 : term
@[macro scpndisj] def pndisjImpl : Lean.Macro
  | `($t1:term # $t2:term) => `(Disjoint $t1 $t2)
  | _ => Lean.Macro.throwUnsupported

/- Semantics -/
inductive LTS : SimpleChor ‚Üí TransitionLabel ‚Üí SimpleChor ‚Üí Prop where
  | com :
    LTS (p ‚Æï q ; c) (p ‚Æï q) c
  | delay :
    LTS c tl c' ‚Üí ({p, q} # (pn tl)) ‚Üí
    ----------------------------------
    LTS (p ‚Æï q ; c) tl (p ‚Æï q ; c')

syntax:30 (name := scLTS) term:30 " -[ " term:30 " ]-> " term:30 : term
@[macro scLTS] def scLTSImpl : Lean.Macro
  | `($t1 -[ $t2 ]-> $t3) => `(LTS $t1 $t2 $t3)
  | _ => Lean.Macro.throwUnsupported

-- Example 2.3
example : (buyer ‚Æï seller ; seller ‚Æï buyer ; ùüé) -[(buyer ‚Æï seller)]-> (seller ‚Æï buyer ; ùüé) := by
  apply LTS.com
example : (seller ‚Æï buyer ; ùüé) -[(seller ‚Æï buyer)]-> (ùüé) := by
  apply LTS.com

-- Exercise 2.3
-- The transition for the exercise 2.1
example : (alice ‚Æï bob ; bob ‚Æï charlie ; charlie ‚Æï alice ; ùüé) -[(alice ‚Æï bob)]-> (bob ‚Æï charlie ; charlie ‚Æï alice ; ùüé) := by
  sorry
  -- try it :D
example : (bob ‚Æï charlie ; charlie ‚Æï alice ; ùüé) -[(bob ‚Æï charlie)]-> (charlie ‚Æï alice ; ùüé) := by
  sorry
  -- try it :D
example : (charlie ‚Æï alice ; ùüé) -[(charlie ‚Æï alice)]-> (ùüé) := by
  sorry
  -- try it :D

-- The transition for the exercise 2.2
example : (alice ‚Æï bob ; alice ‚Æï charlie ; ùüé) -[(alice ‚Æï bob)]-> (alice ‚Æï charlie ; ùüé) := by
  sorry
  -- try it :D
example : (alice ‚Æï charlie ; ùüé) -[(alice ‚Æï charlie)]-> (ùüé) := by
  sorry
  -- try it :D

-- Example 2.4
variable {buyer‚ÇÅ seller‚ÇÅ buyer‚ÇÇ seller‚ÇÇ : PName}
axiom h : ({buyer‚ÇÅ, seller‚ÇÅ} : Finset PName) # {buyer‚ÇÇ, seller‚ÇÇ}

/- Side conditions: they express constraints on schematic variables -/
example : (buyer‚ÇÅ ‚Æï seller‚ÇÅ ; buyer‚ÇÇ ‚Æï seller‚ÇÇ ; ùüé) -[(buyer‚ÇÇ ‚Æï seller‚ÇÇ)]-> (buyer‚ÇÅ ‚Æï seller‚ÇÅ ; ùüé) := by
  apply LTS.delay
  apply LTS.com
  -- Handling the side condition
  simp [pn, h.symm]

/- Tips :
  1. Use the `simp` tactic to simplify the goal
  2. Use the `symm` method to apply the symmetry of the hypothesis
  The symmetry of Disjoint is defined as follows:
  theorem Disjoint.symm {Œ± : Type u_1}  [PartialOrder Œ±]  [OrderBot Œ±]  ‚¶Éa b : Œ±‚¶Ñ :
    Disjoint a b ‚Üí Disjoint b a
  https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Disjoint.html#Disjoint.symm
-/

-- Example 2.5
variable {p‚ÇÅ p‚ÇÇ p‚ÇÉ q‚ÇÅ q‚ÇÇ q‚ÇÉ : PName}
-- Distinct process names
axiom h‚ÇÅ : ({p‚ÇÅ, q‚ÇÅ} : Finset PName) # {p‚ÇÇ, q‚ÇÇ}
axiom h‚ÇÇ : ({p‚ÇÅ, q‚ÇÅ} : Finset PName) # {p‚ÇÉ, q‚ÇÉ}
axiom h‚ÇÉ : ({p‚ÇÇ, q‚ÇÇ} : Finset PName) # {p‚ÇÉ, q‚ÇÉ}

example : (p‚ÇÅ ‚Æï q‚ÇÅ ; p‚ÇÇ ‚Æï q‚ÇÇ ; p‚ÇÉ ‚Æï q‚ÇÉ ; ùüé) -[(p‚ÇÉ ‚Æï q‚ÇÉ)]-> (p‚ÇÅ ‚Æï q‚ÇÅ ; p‚ÇÇ ‚Æï q‚ÇÇ ; ùüé) := by
  apply LTS.delay
  . apply LTS.delay
    . apply LTS.com
    . simp [pn, h‚ÇÉ.symm]
  . simp [pn, h‚ÇÇ.symm]

namespace MultiStepTransition
abbrev TransitionLabels := List TransitionLabel

syntax:20 (name := sctlsnil) " Œµ " : term
@[macro sctlsnil] def sctlsnilImpl : Lean.Macro
  | `(Œµ) => `((List.nil : TransitionLabels))
  | _ => Lean.Macro.throwUnsupported

syntax:10 (name := sctls) term:10 " ‚à∑‚Çú " term:10 : term
@[macro sctls] def sctlsImpl : Lean.Macro
  | `($t1:term ‚à∑‚Çú $t2:term) => `( List.concat ($t1 : TransitionLabels) $t2)
  | _ => Lean.Macro.throwUnsupported

-- Some useful lemmas for manupulating lists
lemma eq_concat_nil :
  [p] = (Œµ ‚à∑‚Çú p) := by rfl

lemma cons_concat_eq:
  x :: (xs ‚à∑‚Çú y) = ((x :: xs) ‚à∑‚Çú y) := by rfl

lemma append_concat_eq :
  xs ++ (ys ‚à∑‚Çú y) = ((xs ++ ys) ‚à∑‚Çú y) := by simp

inductive MST : SimpleChor ‚Üí TransitionLabels ‚Üí SimpleChor ‚Üí Prop where
  | refl :
    MST s (Œµ) s
  | stepR :
    MST s ps s'' ‚Üí s'' -[p]-> s' ‚Üí
    --------------------------------
        MST s (ps ‚à∑‚Çú p) s'

syntax:30 (name := scMST) term:30 " -[ " term:30 " ]->> " term:30 : term
@[macro scMST] def scMSTImpl : Lean.Macro
  | `($t1 -[ $t2 ]->> $t3) => `(MST $t1 $t2 $t3)
  | _ => Lean.Macro.throwUnsupported

-- Example 2.12 (Figure 2.5)
example : (buyer ‚Æï seller ; seller ‚Æï buyer ; ùüé) -[([buyer ‚Æï seller] ‚à∑‚Çú seller ‚Æï buyer)]->> (ùüé) := by
  apply MST.stepR
  . rw [eq_concat_nil] -- this rewrite is definitely not necessary in the paper proof
    apply MST.stepR
    . apply MST.refl
    . apply LTS.com
  . apply LTS.com

-- Exercise 2.9
-- Rule StepL is admissible
theorem admissible_step_l : c -[tl]-> c'' ‚Üí c'' -[tls]->> c' ‚Üí  c -[(tl :: tls)]->> c' := by
  sorry
  -- try it :D

-- Rule Comp is admissible
theorem admissible_comp : c -[tls]->> c'' ‚Üí c'' -[tls']->> c' ‚Üí c -[(tls ++ tls')]->> c' := by
  sorry
  -- try it :D

-- Exercise 2.10
-- Rule Single is admissible
theorem derivable_single : c -[tl]-> c' ‚Üí c -[[tl]]->> c' := by
  sorry
  -- try it :D

-- Exercise 2.11
inductive MST‚Çó : SimpleChor ‚Üí TransitionLabels ‚Üí SimpleChor ‚Üí Prop where
  | refl :
    MST‚Çó s (Œµ) s
  | stepL :
    s -[p]-> s'' ‚Üí MST‚Çó s'' ps s' ‚Üí
    --------------------------------
        MST‚Çó s (p :: ps) s'

syntax:30 (name := scMSTL) term:30 " -[ " term:30 " ]->>‚Çó " term:30 : term
@[macro scMSTL] def scMSTLImpl : Lean.Macro
  | `($t1 -[ $t2 ]->>‚Çó $t3) => `(MST‚Çó $t1 $t2 $t3)
  | _ => Lean.Macro.throwUnsupported

-- Rule StepR is admissible
theorem admissible_l_step_r : c -[tls]->>‚Çó c'' ‚Üí c'' -[tl]-> c' ‚Üí  c -[(tls ‚à∑‚Çú tl)]->>‚Çó c' := by
  sorry
  -- try it :D

-- Rule Comp is admissible
theorem admissible_l_comp : c -[tls]->>‚Çó c'' ‚Üí c'' -[tls']->>‚Çó c' ‚Üí c -[(tls ++ tls')]->>‚Çó c' := by
  sorry
  -- try it :D

-- Rule Single is admissible
theorem admissible_l_single : c -[tl]-> c' ‚Üí c -[[tl]]->>‚Çó c' := by
  sorry
  -- try it :D

-- Exercise 2.12
inductive MSTAlt : SimpleChor ‚Üí TransitionLabels ‚Üí SimpleChor ‚Üí Prop where
  | refl :
    MSTAlt s (Œµ) s
  | single :
    s -[tl]-> s' ‚Üí MSTAlt s [tl] s'
  | comp :
    MSTAlt s ps s'' ‚Üí MSTAlt s'' ps' s' ‚Üí
    --------------------------------
        MSTAlt s (ps ++ ps') s'

syntax:30 (name := scMSTA) term:30 " -[ " term:30 " ]->>‚Çê " term:30 : term
@[macro scMSTA] def scMSTAImpl : Lean.Macro
  | `($t1 -[ $t2 ]->>‚Çê $t3) => `(MSTAlt $t1 $t2 $t3)
  | _ => Lean.Macro.throwUnsupported

theorem derivable_mst_alt : c -[tls]->> c' ‚Üí c -[tls]->>‚Çê c' := by
  sorry
  -- try it :D

end MultiStepTransition
