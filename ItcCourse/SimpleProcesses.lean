import Mathlib
import ItcCourse.Common

variable {buyer seller alice bob charlie: PName}

inductive SimpleProc : Type 0 where
  | nil
  | send (p : PName) (pr : SimpleProc)
  | receive (p : PName) (pr : SimpleProc)

-- Explaining Russell's paradox
inductive MyInductive0 : Type 0 where
  | oneCase

inductive MyInductive1 : Type 1 where
  | anotherCase

inductive AnotherInductive {Œ± : Type u} {Œ≤ : Type v} : Type (max u v) where
  | caseblah (x : Œ±) (y : Œ≤)
-- end of explanation

syntax:12 (name := spnil) "ùüé‚Çö" : term
@[macro spnil] def spnilImpl : Lean.Macro
  | `(ùüé‚Çö) => `(SimpleProc.nil)
  | _ => Lean.Macro.throwUnsupported

syntax:10 (name := spsend) term:10 "!" ";" term:10 : term
@[macro spsend] def spsendImpl : Lean.Macro
  | `($t1:term ! ; $t2:term) => `(SimpleProc.send $t1 $t2)
  | _ => Lean.Macro.throwUnsupported

syntax:10 (name := sprecv) term:10 "?" ";" term:10 : term
@[macro sprecv] def sprecvImpl : Lean.Macro
  | `($t1:term ? ; $t2:term) => `(SimpleProc.receive $t1 $t2)
  | _ => Lean.Macro.throwUnsupported

-- Example 3.1 and 3.2
-- Recall the choreography from Example 2.2

/- buyer ‚Æï seller ; seller ‚Æï buyer ; ùüé -/

-- To implement the choreography, we need two process programs,
-- one for the process buyer and one for the process seller.
-- For buyer, 1) send a message to seller, 2) receive a message from seller
example : SimpleProc := seller ! ; seller ? ; ùüé‚Çö
-- For seller, 1) receive a message from buyer, 2) send a message to buyer
example : SimpleProc := buyer ? ; buyer ! ; ùüé‚Çö

-- Exercise 3.1 Wirte a process term that formalises the following sequence of actions:
-- 1) Receive a message from Alice, 2) Send a message to Bob, 3) Send a message to Charlie
example : SimpleProc := sorry
-- try it :D

abbrev Network := PName ‚Üí SimpleProc

def supp (n : Network) : Set PName :=
  { p | n p ‚â† (ùüé‚Çö) }

-- Terminated network
def Network.nil : Network := Œª _ => (ùüé‚Çö)
syntax:12 (name := nwnil) "ùüé‚Çô" : term
@[macro nwnil] def nwnilImpl : Lean.Macro
  | `(ùüé‚Çô) => `(Network.nil)
  | _ => Lean.Macro.throwUnsupported
#check ùüé‚Çô

-- Atomic network
def Network.atomic (p : PName) (pr : SimpleProc) : Network :=
  Œª q => if p = q then pr else ùüé‚Çö
macro t1:term:10 "[" t2:term:11 "]" : term => `(Network.atomic $t1 $t2)
-- Example 3.3 The network with one running process, buyer, which behaves
-- as the defines in Example 3.2
example : Network := buyer [ (seller ! ; seller ? ; ùüé‚Çö) ]

-- Decidable equality for SimpleProc, this is need for encoding the parallel composition
instance (n : Network) : DecidablePred (fun p => n p = (ùüé‚Çö)) := by
  intro p
  simp_all
  cases (n p)
  . apply isTrue
    simp_all
  . apply isFalse
    simp_all
  . apply isFalse
    simp_all
-- Don't worry too much about this (¬¥„Éªœâ„ÉªÔΩÄ)

-- Parallel composition of networks
-- note: n p ‚â† (ùüé‚Çö) -> p ‚àà supp n, recall the definition of supp n
def Network.par (n m : Network): Network :=
  Œª p => if n p ‚â† (ùüé‚Çö) then n p else m p
macro t1:term:10 " |‚Çô " t2:term:11 : term => `(Network.par $t1 $t2)
-- note : we are implicitly assuming that supp n # supp m,
-- but we will explicitly need this to prove properties about the parallel composition.

-- Example 3.4 using the parallel composition to implement the bookstore scenario in example 3.1
example : Network :=
  buyer [ (seller ! ; seller ? ; ùüé‚Çö) ] |‚Çô seller [ (buyer ? ; buyer ! ; ùüé‚Çö) ]

-- Two networks are disjoint if they share no running processes
def Network.disjoint (n m : Network) : Prop :=
  ‚àÄ p, n p = (ùüé‚Çö) ‚à® m p = (ùüé‚Çö)

-- A property of disjoint networks
theorem Network.disjoint_symm (n m : Network) : n.disjoint m ‚Üí m.disjoint n := by
  intro h
  intro p
  simp [Network.disjoint] at h
  cases (h p)
  . apply Or.inr
    assumption
  . apply Or.inl
    assumption

-- Proposition 3.2 and exercise 3.3
theorem Network.supp_union (n m : Network) {h : n.disjoint m} : supp (n |‚Çô m) = supp n ‚à™ supp m := by
  sorry
  -- Try it :D
  -- Hint: use Set.ext

-- Let's check what this theorem does
#check Set.ext
-- In mathlib: https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Defs.html#Set.ext

-- Equality of networks
-- Extensional equality in action (^w^)
-- Example 3.6
#check funext
-- In mathlib: https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#funext
theorem Network.nil_par_eq_nil:
  (ùüé‚Çô |‚Çô ùüé‚Çô) = (ùüé‚Çô) := by
  rfl
  -- apply funext
  -- intro p
  -- simp [Network.par]
-- Notes on aesop : Lean 4's proof search tactic.
-- https://github.com/leanprover-community/aesop

-- Properties of Parallel Composition
-- Proposition 3.4 partial commutative monoid
theorem Network.par_nil (n : Network) : (n |‚Çô ùüé‚Çô) = n := by
  -- apply funext
  -- intro p
  funext p
  simp [Network.par]
  aesop -- simplifies the last three lines
  -- intro h
  -- simp [h]
  -- rfl

lemma mylemma : ‚àÄ (n m : Network), n.disjoint m ‚Üí (n |‚Çô m) = (m |‚Çô n) := by
  intro n
  intro m
  intro h
  funext p
  simp [Network.par]
  simp [Network.disjoint] at h
  specialize (h p)
  cases h
  . rename_i h_n_p_nil
    simp [h_n_p_nil]
    by_cases h_m_p_nil : m p = SimpleProc.nil
    . simp only [h_m_p_nil]
      trivial
    . simp only [h_m_p_nil]
      trivial
  . sorry




#check mylemma

lemma Network.par_comm (n m : Network)
  {h : n.disjoint m} : (n |‚Çô m) = (m |‚Çô n) := by
  funext p
  simp [Network.par]
  simp [Network.disjoint] at h
  -- cases (h p) <;> aesop --cleverer way to do the same thing (^w^)
  cases (h p)
  . rename_i h‚ÇÅ
    simp [h‚ÇÅ]
    by_cases h‚ÇÇ : m p = (ùüé‚Çö)
    . simp [h‚ÇÇ]
    . simp [h‚ÇÇ]
  . rename_i h‚ÇÅ
    simp [h‚ÇÅ]
    by_cases h‚ÇÇ : n p = (ùüé‚Çö)
    . simp [h‚ÇÇ]
    . simp [h‚ÇÇ]

lemma Network.par_assoc (n1 n2 n3 : Network) : ((n1 |‚Çô n2) |‚Çô n3) = (n1 |‚Çô (n2 |‚Çô n3)) := by
  funext p
  simp [Network.par]
  -- by_cases h‚ÇÅ : n1 p = (ùüé‚Çö)
  -- . simp [h‚ÇÅ]
  -- . simp [h‚ÇÅ]
  -- Now I am lazy _(:3 „Äç‚à†)_
  aesop

-- Propositional 3.5 and exercise 3.4
theorem Network.par_atomic_nil : (n |‚Çô (p [ùüé‚Çö])) = n := by
  sorry
  -- Try it :D
  -- Hint: use funext

/- Semantics -/
inductive NLTS : Network ‚Üí TransitionLabel ‚Üí Network ‚Üí Prop where
  | com :
    NLTS (p [ (q ! ; pr)] |‚Çô q [ (p ? ; qr)]) (p ‚Æï q) (p [pr] |‚Çô q [qr])
  | par :
    NLTS n tl n' ‚Üí NLTS (n |‚Çô m) tl (n' |‚Çô m)

syntax:30 (name := spNLTS) term:30 " -[ " term:30 " ]‚Çô-> " term:30 : term
@[macro spNLTS] def spNLTSImpl : Lean.Macro
  | `($t1 -[ $t2 ]‚Çô-> $t3) => `(NLTS $t1 $t2 $t3)
  | _ => Lean.Macro.throwUnsupported

-- Example 3.8
private axiom buyer_not_seller : buyer ‚â† seller
example : (buyer [ (seller ! ; seller ? ; ùüé‚Çö) ] |‚Çô seller [ (buyer ? ; buyer ! ; ùüé‚Çö) ]) -[(buyer ‚Æï seller)]‚Çô-> (buyer [ (seller ? ; ùüé‚Çö) ] |‚Çô seller [ (buyer ! ; ùüé‚Çö) ]) := by
  exact NLTS.com

-- Example 3.9
lemma buyer_disjoint_seller : (buyer [ (seller ? ; ùüé‚Çö) ]).disjoint (seller [ (buyer ! ; ùüé‚Çö) ]) := by
  intro p
  simp [Network.atomic]
  by_cases h_p_buyer : p = buyer
  . simp [h_p_buyer]
    exact buyer_not_seller
  . apply Or.inl
    exact Ne.symm h_p_buyer

example : (buyer [ (seller ? ; ùüé‚Çö) ] |‚Çô seller [ (buyer ! ; ùüé‚Çö) ]) -[(seller ‚Æï buyer)]‚Çô-> (seller [ ùüé‚Çö ] |‚Çô buyer [ ùüé‚Çö ]) := by
  -- Parallel composition is commutative
  rw [@Network.par_comm (buyer [ (seller ? ; ùüé‚Çö) ]) (seller [ (buyer ! ; ùüé‚Çö) ]) buyer_disjoint_seller]
  exact NLTS.com

lemma atomic_nil_eq_network_nil (p : PName) : p [ùüé‚Çö] = (ùüé‚Çô) := by
  funext q
  simp [Network.atomic, Network.nil]

example : (seller [ ùüé‚Çö ] |‚Çô buyer [ ùüé‚Çö ]) = (ùüé‚Çô) := by
  rw [Network.par_atomic_nil] -- proposition 3.5
  rw [atomic_nil_eq_network_nil]

-- Example 3.10 Parallel execution
variable {client server gateway : PName}
example : (client [ (gateway ! ; ùüé‚Çö)] |‚Çô (gateway [ (client ? ; server ! ; ùüé‚Çö ) ] |‚Çô server [ (gateway ? ; ùüé‚Çö)]))
  -[(client ‚Æï gateway)]‚Çô-> ((client [ ùüé‚Çö ] |‚Çô gateway [ (server ! ; ùüé‚Çö) ]) |‚Çô server [ (gateway ? ; ùüé‚Çö) ]) := by
  rw [‚Üê Network.par_assoc] -- ‚Üê specifies the direction of the rewrite
  apply NLTS.par
  exact NLTS.com

/- Fundemental Property of the Semantics -/

-- Transition and process names
-- Proposition 3.7 : A transition never affacts the processes that are not involved in the transition
-- Proof by induction on the transition label
lemma unaffected_process (n‚ÇÅ n‚ÇÇ : Network) (tl : TransitionLabel) (r : PName):
  n‚ÇÅ -[tl]‚Çô-> n‚ÇÇ ‚Üí r ‚àâ tl.pn ‚Üí n‚ÇÅ r = n‚ÇÇ r := by
  intro hnlts hnotin
  induction hnlts
  case com p q pr qr =>
    simp [TransitionLabel.pn] at hnotin
    simp [Network.par]
    simp [Network.atomic]
    obtain ‚ü® hrnotp , hrnotq ‚ü© := hnotin
    simp [Ne.symm hrnotp]
    simp [Ne.symm hrnotq]
  case par m‚ÇÅ tl m‚ÇÇ m hnlts ih =>
    -- obtain equality from ih
    have heq := ih hnotin
    simp [Network.par]
    simp [heq]

-- Transition and process removal
def Network.rm (n : Network) (p : PName) : Network :=
  Œª q => if p = q then ùüé‚Çö else n q
notation:50 n " \\ " p => Network.rm n p

-- Proposition 3.8 and Execrise 3.6
lemma rm_not_in_supp (n : Network) (p : PName) : p ‚àâ supp n ‚Üí (n \ p) = n := by
  -- Try it and have fun :D
  sorry

-- Proposition 3.9 The order in which processes are removed does not matter
lemma rm_comm (n : Network) (p q : PName) : ((n \ p) \ q) = ((n \ q) \ p):= by
  funext r
  simp [Network.rm]
  by_cases hqr : q = r
  . simp [hqr]
  . simp [hqr]

-- (Not in the book) A very good property to have, process removal is distributive over parallel composition
lemma rm_par_dist (n m : Network) (p : PName) : ((n |‚Çô m) \ p) = ((n \ p) |‚Çô (m \ p)) := by
  funext r
  simp [Network.par, Network.rm]
  by_cases hpr : p = r
  . simp [hpr]
  . simp [hpr]

-- Lemma 3.10
lemma rm_unaffected_process (n‚ÇÅ n‚ÇÇ : Network) (tl : TransitionLabel) (r : PName):
  n‚ÇÅ -[tl]‚Çô-> n‚ÇÇ ‚Üí r ‚àâ tl.pn ‚Üí (n‚ÇÅ \ r) -[tl]‚Çô-> (n‚ÇÇ \ r):= by
  intro hnlts hnotin
  induction hnlts
  case com p q pr qr =>
    simp [TransitionLabel.pn] at hnotin
    obtain ‚ü® hrnotp , hrnotq ‚ü© := hnotin
    -- Step 1 : introduce an assumption locally
    have hr_notin_supp‚ÇÅ : r ‚àâ supp ((p [ (SimpleProc.send q pr)] ) |‚Çô (q [(SimpleProc.receive p qr)])) := by
      simp [supp]
      simp [Network.par, Network.atomic]
      simp [Ne.symm hrnotp]
      simp [Ne.symm hrnotq]
    -- Step 2: using proposition 3.8 to construct an equality relation for the networks before the transition
    have heq‚ÇÅ := rm_not_in_supp ((p [ (SimpleProc.send q pr)] ) |‚Çô (q [(SimpleProc.receive p qr)])) r hr_notin_supp‚ÇÅ
    -- repeat the previous two steps for the networks after the transition
    have hr_notin_supp‚ÇÇ : r ‚àâ supp ((p [pr]) |‚Çô (q [qr])) := by
      simp [supp]
      simp [Network.par, Network.atomic]
      simp [Ne.symm hrnotp]
      simp [Ne.symm hrnotq]
    have heq‚ÇÇ := rm_not_in_supp ((p [pr]) |‚Çô (q [qr])) r hr_notin_supp‚ÇÇ
    rw [heq‚ÇÅ, heq‚ÇÇ]
    exact NLTS.com
  case par m‚ÇÅ tl m‚ÇÇ m hnlts ih =>
    -- This is simpler than the proof in the book
    rw [rm_par_dist m‚ÇÅ m r] -- you can specify what to rewrite
    rw [rm_par_dist m‚ÇÇ m r]
    have hpar := @NLTS.par (m‚ÇÅ \ r) tl (m‚ÇÇ \ r) (m \ r) (ih hnotin)
    exact hpar
