import ItcCourse.SimpleChoreographies
import ItcCourse.SimpleProcesses

variable {buyer seller : PName}
private axiom buyer_not_seller : buyer ‚â† seller

opaque myBuyer: PName := 1
opaque mySeller: PName := 2

def SimpChor.projection (c : SimpleChor) (r : PName) : SimpleProc :=
  match c with
  | SimpleChor.nil => SimpleProc.nil
  | SimpleChor.com p q c' =>
    if r = p then q ! ; (projection c' r)
    else if r = q then p ? ; (projection c' r)
    else projection c' r
notation:49 "‚ü¶" t1 "‚üß" t2 => SimpChor.projection t1 t2

-- Example 4.1
example : ( ‚ü¶ buyer ‚Æï seller ; seller ‚Æï buyer ; ùüé ‚üß buyer) = (seller ! ; seller ? ; ùüé‚Çö) := by
  simp [SimpChor.projection]
  exact buyer_not_seller
  -- simp [SimpChor.projection]
  -- simp [buyer_not_seller]

example : ( ‚ü¶ buyer ‚Æï seller ; seller ‚Æï buyer ; ùüé ‚üß seller) = (buyer ? ; buyer ! ; ùüé‚Çö) := by
  simp [SimpChor.projection]
  exact buyer_not_seller
  -- simp [SimpChor.projection]
  -- simp [buyer_not_seller]

#eval (‚ü¶ myBuyer ‚Æï mySeller ; mySeller ‚Æï myBuyer ; ùüé ‚üß myBuyer)

#eval (‚ü¶ myBuyer ‚Æï mySeller ; mySeller ‚Æï myBuyer ; ùüé ‚üß mySeller)

-- fun f  (c) : Œª r ‚Üí c r

def SimpChor.epp (c : SimpleChor) : Network :=
  Œª r => ‚ü¶c‚üß r
macro:max (priority := high) "‚ü¶" t1:term:10 "‚üß" : term => `(SimpChor.epp $t1)

-- Example 4.2
example :
  (‚ü¶ buyer ‚Æï seller ; seller ‚Æï buyer ; ùüé ‚üß) =
  (buyer [ (seller ! ; seller ? ; ùüé‚Çö) ] |‚Çô seller [ (buyer ? ; buyer ! ; ùüé‚Çö) ]) := by
  funext r
  simp [SimpChor.epp, SimpChor.projection, buyer_not_seller, Network.par, Network.atomic]
  -- funext r
  -- simp [SimpChor.epp, SimpChor.projection, Network.par, Network.atomic, buyer_not_seller]

opaque procNotBuyerOrSeller : PName := 3

#eval (‚ü¶ myBuyer ‚Æï mySeller ; mySeller ‚Æï myBuyer ; ùüé ‚üß) myBuyer

#eval (‚ü¶ myBuyer ‚Æï mySeller ; mySeller ‚Æï myBuyer ; ùüé ‚üß) mySeller

#eval (‚ü¶ myBuyer ‚Æï mySeller ; mySeller ‚Æï myBuyer ; ùüé ‚üß) procNotBuyerOrSeller

-- Proposition 3.15+, a more detailed version of the proposition 3.15
-- A more general form would be N = N \ p \ q | p [ N p ] | q [ N q ]
lemma Choreography.epp_rm_par (c : SimpleChor) (p q : PName):
  (‚ü¶ c ‚üß) = ((‚ü¶ c ‚üß \ p) \ q) |‚Çô (p [(‚ü¶ c ‚üßp)] |‚Çô q [(‚ü¶ c ‚üß q)]) := by
  funext r
  simp [Network.par, Network.atomic, Network.rm]
  by_cases hpr : p = r
  . simp [hpr]
    simp [SimpChor.epp]
    by_cases hqr : q = r
    . simp [hqr]
    . simp [hqr]
      by_cases hprojnil : SimpChor.projection c r = SimpleProc.nil
      . simp [hprojnil]
      . simp [hprojnil]
  . simp [hpr]
    simp [SimpChor.epp]
    by_cases hqr : q = r
    . simp [hqr]
    . simp [hqr]
      by_cases hprojnil : SimpChor.projection c r = SimpleProc.nil
      . simp [hprojnil]
      . simp [hprojnil]

-- A more detailed version of the lemma 4.8
lemma Choreography.epp_com_rm_eq_epp_cont_rm (p q : PName) (c : SimpleChor): ((‚ü¶ (SimpleChor.com p q c) ‚üß \ p) \ q) = ((‚ü¶ c ‚üß \ p) \ q) := by
  funext r
  simp [Network.rm]
  by_cases hrp : r = p
  . simp [hrp]
  . simp [Ne.symm hrp]
    by_cases hrq : r = q
    . simp [hrq]
    . simp [Ne.symm hrq]
      simp [SimpChor.epp, SimpChor.projection]
      simp [hrp, hrq]

theorem epp_completeness (c c' : SimpleChor) (tl : TransitionLabel) (hwf : SimpleChor.WF c):
c -[tl]-> c' ‚Üí (‚ü¶ c ‚üß -[tl]‚Çô-> ‚ü¶c'‚üß) := by
  intro hlts
  induction hlts
  case com p q c1 =>

    have hwfinv := SimpleChor.WF_com_inv hwf
    obtain ‚ü®hinv, hneq ‚ü© := hwfinv

    have heq1 : (‚ü¶ (SimpleChor.com p q c1) ‚üß) = (((‚ü¶ (SimpleChor.com p q c1)‚üß \ p) \ q) |‚Çô (p [ (q ! ; ‚ü¶ c1 ‚üß p) ] |‚Çô q [ (p ? ;  ‚ü¶ c1 ‚üß q) ])) := by
      have goal := Choreography.epp_rm_par (SimpleChor.com p q c1) p q -- by proposition 3.15+
      simp [SimpChor.projection] at goal -- by (4.3)
      simp [Ne.symm hneq] at goal -- by well-formedness
      exact goal

    have heq2 : (‚ü¶ c1 ‚üß) = ((‚ü¶ c1 ‚üß \ p) \ q) |‚Çô (p [(‚ü¶ c1 ‚üßp)] |‚Çô q [(‚ü¶ c1 ‚üß q)]) := by
      exact Choreography.epp_rm_par c1 p q -- by lemma 3.15+

    have heq3 := Choreography.epp_com_rm_eq_epp_cont_rm p q c1
    rw [heq3] at heq1

    -- commutativity of parallel composition
    have hcomm1 : (((‚ü¶ c1‚üß \ p) \ q) |‚Çô (p [ (q ! ; ‚ü¶ c1 ‚üß p) ] |‚Çô q [ (p ? ;  ‚ü¶ c1 ‚üß q) ])) = (p [ (q ! ; ‚ü¶ c1 ‚üß p) ] |‚Çô q [ (p ? ;  ‚ü¶ c1 ‚üß q) ]) |‚Çô ((‚ü¶ c1 ‚üß \ p) \ q) := by
      have hdisj := Network.ne_rm_par_disjoint (‚ü¶  c1 ‚üß) p q (q ! ; ‚ü¶ c1 ‚üß p) (p ? ;  ‚ü¶ c1 ‚üß q) hneq
      exact @Network.par_comm ((‚ü¶ c1 ‚üß \ p) \ q) (p [ (q ! ; ‚ü¶ c1 ‚üß p) ] |‚Çô q [ (p ? ;  ‚ü¶ c1 ‚üß q) ]) hdisj

    have hcomm2 : (((‚ü¶ c1 ‚üß \ p) \ q) |‚Çô (p [(‚ü¶ c1 ‚üßp)] |‚Çô q [(‚ü¶ c1 ‚üß q)])) = (p [(‚ü¶ c1 ‚üßp)] |‚Çô q [(‚ü¶ c1 ‚üß q)]) |‚Çô ((‚ü¶ c1 ‚üß \ p) \ q) := by
      have hdisj := Network.ne_rm_par_disjoint (‚ü¶ c1 ‚üß) p q (‚ü¶ c1 ‚üß p) (‚ü¶ c1 ‚üß q) hneq
      exact @Network.par_comm ((‚ü¶ c1 ‚üß \ p) \ q) (p [(‚ü¶ c1 ‚üßp)] |‚Çô q [(‚ü¶ c1 ‚üß q)]) hdisj
    -- rewrite the goal to use network transition rules
    rw [hcomm1] at heq1
    rw [hcomm2] at heq2
    rw [heq1]
    nth_rewrite 2 [heq2]

    apply NLTS.par
    apply NLTS.com
  case delay c1 tl' c2 p q hlts hdisj ih =>
    obtain ‚ü® hwf', hneq‚ü© := SimpleChor.WF_com_inv hwf
    specialize ih hwf'
    have heq1 : (‚ü¶ (SimpleChor.com p q c1) ‚üß) = (((‚ü¶ (SimpleChor.com p q c1)‚üß \ p) \ q) |‚Çô (p [ (q ! ; ‚ü¶ c1 ‚üß p) ] |‚Çô q [ (p ? ;  ‚ü¶ c1 ‚üß q) ])) := by
      have goal := Choreography.epp_rm_par (SimpleChor.com p q c1) p q -- by lemma 3.15+
      simp [SimpChor.projection] at goal -- by (4.3)
      simp [Ne.symm hneq] at goal -- by well-formedness
      exact goal
    have heq2 : (‚ü¶ (SimpleChor.com p q c2) ‚üß) = (((‚ü¶ (SimpleChor.com p q c2)‚üß \ p) \ q) |‚Çô (p [ (q ! ; ‚ü¶ c2 ‚üß p) ] |‚Çô q [ (p ? ;  ‚ü¶ c2 ‚üß q) ])) := by
      have goal := Choreography.epp_rm_par (SimpleChor.com p q c2) p q -- by lemma 3.15+
      simp [SimpChor.projection] at goal -- by (4.3)
      simp [Ne.symm hneq] at goal -- by well-formedness
      exact goal
    have heq3 := Choreography.epp_com_rm_eq_epp_cont_rm p q c1
    have heq4 := Choreography.epp_com_rm_eq_epp_cont_rm p q c2
    rw [heq3] at heq1
    rw [heq4] at heq2

    -- We want to use Lemma 3.10
    have hpnotin : p ‚àâ tl'.pn := by
      have hpinpq : p ‚àà ({p , q} : Finset PName) := by simp
      exact Finset.disjoint_left.1 hdisj hpinpq
    have hqnotin : q ‚àâ tl'.pn := by
      have hqinpq : q ‚àà ({p , q} : Finset PName) := by simp
      exact Finset.disjoint_left.1 hdisj hqinpq
    have ihrmp : (‚ü¶ c1 ‚üß \ p) -[tl']‚Çô-> (‚ü¶ c2 ‚üß \ p) := by
      exact Network.rm_unaffected_process (‚ü¶ c1 ‚üß) (‚ü¶ c2 ‚üß) tl' p ih hpnotin -- Lemma 3.10
    have ihqrm : ((‚ü¶ c1 ‚üß \ p) \ q) -[tl']‚Çô-> ((‚ü¶ c2 ‚üß \ p) \ q) := by
      exact Network.rm_unaffected_process ((‚ü¶ c1 ‚üß \ p)) ((‚ü¶ c2 ‚üß \ p)) tl' q ihrmp hqnotin -- Lemma 3.10 again

    -- we want to use Proposition 3.7
    have heq5 : (‚ü¶ c1 ‚üß p) = (‚ü¶ c2 ‚üß p) := by
      have goal := Network.unaffected_process (‚ü¶ c1 ‚üß) (‚ü¶ c2 ‚üß) tl' p ih hpnotin -- Proposition 3.7
      simp [SimpChor.epp] at goal
      exact goal
    have heq6 : (‚ü¶ c1 ‚üß q) = (‚ü¶ c2 ‚üß q) := by
      have goal := Network.unaffected_process (‚ü¶ c1 ‚üß) (‚ü¶ c2 ‚üß) tl' q ih hqnotin -- Proposition 3.7
      simp [SimpChor.epp] at goal
      exact goal
    rw [heq1, heq2]
    rw [‚Üê heq5, ‚Üê heq6]
    apply NLTS.par
    exact ihqrm
